---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import Sidebar from '../components/Sidebar.astro'; 
import { SITE_DESCRIPTION } from '../consts';
---

<!DOCTYPE html>
<html lang="en">
<head>
  <BaseHead title="Mommy Rage" description={SITE_DESCRIPTION} />
  <style>
    #gameContainer {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: black;
      padding: 20px;
      border-radius: 10px;
    }

    canvas {
      background-color: #000;
      border-radius: 10px;
      max-width: 100%;
      height: auto;
    }

    #mommy-controls {
      display: flex;
      justify-content: center;
      margin-top: 15px;
      gap: 10px;
      flex-wrap: wrap;
    }

    button {
      padding: 12px 20px;
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;
      background-color: #558A36;
      color: white;
      border: none;
      border-radius: 6px;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #4A7830;
    }

    #mommy-start-button {
      background-color: var(--apu-green);
      width: 200px;
      margin-bottom: 20px;
      animation: pulse 1.2s infinite;
    }
/* Pulsating animation */
@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(1.1);
    opacity: 0.8;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}
    #mommy-start-button:hover {
      background-color: var(--accent);
    }

    #mommy-try-again-button {
      background-color: var(--apu-green);
      width: 200px;
      margin-top: 20px;
      display: none; /* Initially hidden */
    }

    #mommy-try-again-button:hover {
      background-color: var(--accent);
    }

    /* Arrow buttons styling */
    .arrow-group {
      display: flex;
      flex-direction: row;
      gap: 5px;
    }

    .arrow-row {
      display: flex;
      justify-content: center;
      gap: 50px;
    }


  </style>
</head>
<body>
  <Header />
  <div class="content-wrapper">
    <main>
      <h1>Mommy Rage</h1>
      <p>Steal the nuggies but avoid Mommy!</p>

      <div id="gameContainer">
        <button id="mommy-start-button">Start Game</button>
        <canvas id="mommy-game-canvas" width="900" height="450"></canvas>
        <button id="mommy-try-again-button">Try Again</button>

        <div id="mommy-controls">
          <div class="arrow-group">

            <div class="arrow-row">
              <button id="mommy-left">←</button>
              <button id="mommy-up">↑</button>
              <button id="mommy-down">↓</button>
              <button id="mommy-right">→</button>
            </div>
          </div>
        </div>
      </div>
    </main>
    <Sidebar />
  </div>
  <Footer />

  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const canvas = document.getElementById('mommy-game-canvas');
      const ctx = canvas.getContext('2d');
      const startButton = document.getElementById('mommy-start-button');
      const tryAgainButton = document.getElementById('mommy-try-again-button');
      const btnUp = document.getElementById('mommy-up');
      const btnDown = document.getElementById('mommy-down');
      const btnLeft = document.getElementById('mommy-left');
      const btnRight = document.getElementById('mommy-right');
    
      const pacmanImage = new Image(); pacmanImage.src = '/mommyrage/image1.png';
      const ghostImage = new Image(); ghostImage.src = '/mommyrage/image2.png';
      const coin1Image = new Image(); coin1Image.src = '/mommyrage/image3.png';
      const coin2Image = new Image(); coin2Image.src = '/mommyrage/image4.png';
      const overlayImage = new Image(); overlayImage.src = '/mommyrage/mommyrage.jpg';
    
      const gridSize = 32;
      const mommyPacman = { x:32, y:32, width:32, height:32, speed:4 };
      const mommyGhost = { x:64, y:64, width:32, height:32, speed:4, dir:'right' };
      let mommyInitialSpeed = mommyGhost.speed; // store initial speed
      const mommySquares = [];
      const mommyCoins = [];
      let mommyScore = 0;
      let mommyGameOver = false;
      let mommyStartTime = 0;
      let mommyCurrentTime = 0;
      let mommyKeys = {};
    
      function isOverlapping(pos1, size1, pos2, size2) {
        return !(pos1.x + size1 <= pos2.x || pos1.x >= pos2.x + size2 || pos1.y + size1 <= pos2.y || pos1.y >= pos2.y + size2);
      }
    
      function checkCollision(obj, newX, newY) {
        return mommySquares.some(sq =>
          newX < sq.x + sq.width &&
          newX + obj.width > sq.x &&
          newY < sq.y + sq.height &&
          newY + obj.height > sq.y
        );
      }
    
      function initGame() {
        mommySquares.length = 0;
        mommyCoins.length = 0;
        mommyScore = 0;
        mommyGameOver = false;
        mommyCurrentTime = 0;
        mommyStartTime = Date.now();
    
        mommyGhost.speed = 3;            // reset ghost speed
        mommyInitialSpeed = mommyGhost.speed; // reset initial speed for multiplier
    
        startButton.style.display = 'none';
        tryAgainButton.style.display = 'none';
    
        const cols = Math.floor(canvas.width / gridSize);
        const rows = Math.floor(canvas.height / gridSize);
    
        // Border walls
        for (let i=0;i<cols;i++){
          for(let j=0;j<rows;j++){
            if(i===0||j===0||i===cols-1||j===rows-1){
              mommySquares.push({ x:i*gridSize, y:j*gridSize, width:gridSize, height:gridSize });
            }
          }
        }
    
        // Random interior walls
        for(let k=0;k<24;k++){
          let square;
          do {
            const x = Math.floor(Math.random()*(cols-2)+1)*gridSize;
            const y = Math.floor(Math.random()*(rows-2)+1)*gridSize;
            square = {x, y, width:gridSize, height:gridSize};
          } while(mommySquares.some(s=>isOverlapping(s,gridSize,square,gridSize)) ||
                  isOverlapping(square,gridSize,mommyPacman,mommyPacman.width) ||
                  isOverlapping(square,gridSize,mommyGhost,mommyGhost.width));
          mommySquares.push(square);
        }
    
        mommyPacman.x = 1*gridSize;
        mommyPacman.y = 1*gridSize;
        mommyGhost.x = (cols-2)*gridSize;
        mommyGhost.y = (rows-2)*gridSize;
      }
    
      function generateCoins() {
        const cols = Math.floor(canvas.width / gridSize);
        const rows = Math.floor(canvas.height / gridSize);
        const availableCells = [];
        for(let i=1;i<cols-1;i++){
          for(let j=1;j<rows-1;j++){
            const cellOccupied = mommySquares.some(sq=>sq.x===i*gridSize && sq.y===j*gridSize);
            if(!cellOccupied && !(i===1 && j===1) && !(i===cols-2 && j===rows-2)){
              availableCells.push({x:i*gridSize+8, y:j*gridSize+8});
            }
          }
        }
        const numCoins = Math.floor(Math.random()*4)+3; // generate more coins
        for(let i=0;i<numCoins;i++){
          if(availableCells.length===0) break;
          const idx=Math.floor(Math.random()*availableCells.length);
          const cell=availableCells[idx];
          mommyCoins.push({x:cell.x,y:cell.y,type:Math.random()<0.5?1:2,collected:false,createdAt:Date.now()});
          availableCells.splice(idx,1);
        }
      }
    
      setInterval(()=>{if(!mommyGameOver) generateCoins();},5000);
    
      function moveCharacter(direction){
        let newX=mommyPacman.x,newY=mommyPacman.y;
        switch(direction){
          case 'up': newY-=mommyPacman.speed; break;
          case 'down': newY+=mommyPacman.speed; break;
          case 'left': newX-=mommyPacman.speed; break;
          case 'right': newX+=mommyPacman.speed; break;
        }
        if(!checkCollision(mommyPacman,newX,newY)){
          mommyPacman.x=newX; mommyPacman.y=newY;
        }
      }
    
      function checkGhostCollision(){
        return mommyPacman.x<mommyGhost.x+mommyGhost.width &&
               mommyPacman.x+mommyPacman.width>mommyGhost.x &&
               mommyPacman.y<mommyGhost.y+mommyGhost.height &&
               mommyPacman.y+mommyPacman.height>mommyGhost.y;
      }
    
      function update(){
        if(mommyGameOver) return;
    
        if(mommyKeys['ArrowUp']) moveCharacter('up');
        if(mommyKeys['ArrowDown']) moveCharacter('down');
        if(mommyKeys['ArrowLeft']) moveCharacter('left');
        if(mommyKeys['ArrowRight']) moveCharacter('right');
    
        if(Math.random()<0.05){
          const dirs=['up','down','left','right'];
          mommyGhost.dir=dirs[Math.floor(Math.random()*dirs.length)];
        }
    
        let gx=mommyGhost.x,gy=mommyGhost.y;
        switch(mommyGhost.dir){
          case 'up': gy-=mommyGhost.speed; break;
          case 'down': gy+=mommyGhost.speed; break;
          case 'left': gx-=mommyGhost.speed; break;
          case 'right': gx+=mommyGhost.speed; break;
        }
        if(!checkCollision(mommyGhost,gx,gy)){mommyGhost.x=gx; mommyGhost.y=gy;}
        mommyGhost.x=Math.max(0,Math.min(mommyGhost.x,canvas.width-mommyGhost.width));
        mommyGhost.y=Math.max(0,Math.min(mommyGhost.y,canvas.height-mommyGhost.height));
    
        // Coin collection and speed scaling
        mommyCoins.forEach(c => {
          if (!c.collected && mommyPacman.x < c.x+16 && mommyPacman.x+mommyPacman.width > c.x &&
              mommyPacman.y < c.y+16 && mommyPacman.y+mommyPacman.height > c.y) {
            c.collected = true;
            mommyScore += (c.type===1?1:-1);
            mommyGhost.speed = mommyInitialSpeed * (1 + mommyScore*0.05); // scale with initial speed
          }
        });
    
        const coinLifetime=33000;
        mommyCoins.forEach(c=>{if(!c.collected && (Date.now()-c.createdAt>coinLifetime)) c.collected=true;});
    
        if(checkGhostCollision()||mommyScore<0) {
          mommyGameOver=true;
          tryAgainButton.style.display = 'block';
        }
        mommyCurrentTime=Math.floor((Date.now()-mommyStartTime)/1000);
      }
    
      function draw(){
        ctx.clearRect(0,0,canvas.width,canvas.height);
        ctx.fillStyle='#558A36';
        mommySquares.forEach(sq=>ctx.fillRect(sq.x,sq.y,sq.width,sq.height));
        ctx.drawImage(pacmanImage,mommyPacman.x,mommyPacman.y,mommyPacman.width,mommyPacman.height);
        ctx.drawImage(ghostImage,mommyGhost.x,mommyGhost.y,mommyGhost.width,mommyGhost.height);
        mommyCoins.forEach(c=>{if(!c.collected) ctx.drawImage(c.type===1?coin1Image:coin2Image,c.x,c.y,16,16);});
        ctx.fillStyle='white';
        ctx.font='15px Comic Sans MS';
        ctx.textAlign='left'; ctx.fillText('Nuggies: '+mommyScore,10,20);
        ctx.textAlign='center'; ctx.fillText('Time: '+mommyCurrentTime+'s',canvas.width/2,20);
        ctx.textAlign='right'; ctx.fillText('Mommy: '+mommyGhost.speed.toFixed(2),canvas.width-10,20);
    
        if(mommyGameOver){
          ctx.fillStyle='red'; ctx.font='40px Arial'; ctx.textAlign='center';
          ctx.fillText('Game Over',canvas.width/2,canvas.height/2);
        }
      }
    
      function gameLoop(){update(); draw(); if(!mommyGameOver) requestAnimationFrame(gameLoop);}
    
      function startGame() {
        initGame(); 
        gameLoop();
      }
    
      startButton.addEventListener('click', startGame);
      tryAgainButton.addEventListener('click', startGame);
      btnUp.addEventListener('click',()=>moveCharacter('up'));
      btnDown.addEventListener('click',()=>moveCharacter('down'));
      btnLeft.addEventListener('click',()=>moveCharacter('left'));
      btnRight.addEventListener('click',()=>moveCharacter('right'));
    
      document.addEventListener('keydown',(e)=>{
        if(['ArrowUp','ArrowDown','ArrowLeft','ArrowRight'].includes(e.key)){
          e.preventDefault(); 
          mommyKeys[e.key]=true;
        }
      });
      document.addEventListener('keyup',(e)=>{
        if(['ArrowUp','ArrowDown','ArrowLeft','ArrowRight'].includes(e.key)){
          e.preventDefault(); 
          mommyKeys[e.key]=false;
        }
      });
    
      overlayImage.onload=()=>{
        ctx.drawImage(overlayImage,0,0,canvas.width,canvas.height);
        ctx.fillStyle='white'; ctx.font='40px Arial'; ctx.textAlign='center';
        ctx.fillText('',canvas.width/2,canvas.height/2);
      };
    });
    </script>
    
</body>
</html>